# Filename:     .shenv
# Authors:      Vincent Demeester
# License:      This file is licensed under the GPL v2.
# --------------------------------------------------------------------------- #
# This file should be sourced on all invocations of "any" posix shell 
# (for $USER). It has to be sourced by .zshenv and similar. It should be kept
# as fast and as portable as possible.
# --------------------------------------------------------------------------- #

# Allow disabling of entire environment suite
test -n "$INHERIT_ENV" && return 0
test -n "$shared_env_loaded" && return 0

# {{{ Are we interactive ? ---------------------------------------------------
case "$-" in
    *i*) shell_interactive=y ;;
      *) shell_interactive=  ;;
esac
# }}}
# {{{ Loading status ---------------------------------------------------------
# Default to 1, and treat empty as 0.  This ensures we have an integer.
: ${DEBUG_LOCAL_HOOKS=1}
: ${DEBUG_LOCAL_HOOKS:=0}

sh_load_status () {
  # Find the name of the running shell
  _this_shell=${shell:-${0##*/}}

  # Find the filename of the running script
  if [ -n "$BASH_SOURCE" ]; then
    _this_script="${BASH_SOURCE[0]}"
    # Deduct 1 because array starts at 0, and another 1 because
    # we want to ignore this stack frame (inside sh_load_status)
    _this_script="${BASH_SOURCE[$(( ${#BASH_SOURCE[@]} - 2))]}"
    # Sheesh.  $ZSH_SOURCE[-2], anyone?
  else
    _this_script="$0"
    # Unfortunately in zsh there seems to be no way of determining
    # the currently running file if a function is being run, unless
    # function_argzero is unset :-/
    [ "$_this_script" = sh_load_status ] && _this_script=
    [ "$_this_script" = -zsh ] && _this_script=
  fi
  [ -n "$_this_script" ] && _this_script="[$_this_script]"

  # Leave status printed?
  
  if [ "$DEBUG_LOCAL_HOOKS" -ge 2 ]; then
    debug="\n"
  fi
  
  # \e[0K is clear to right
  if [ -n "$shell_interactive" ] && [ "$TERM" != 'dumb' ]; then
    _text="${_this_shell}${_this_script}: $*... "
    _text="${_text//\/home\//~}"
    echo -e -n "\r\e[0K$_text$debug"
  fi
}
# }}}
sh_load_status .shenv

# {{{ ZDOTDIR / …
# Set several Z* environment variable to automagically load stuff later.
zdotdir=${ZDOTDIR:-$HOME}
ZDOTDIR="$zdotdir"
ZDOT_RUN_HOOKS="$ZDOTDIR/.sh/functions/run_hooks"
ZDOT_FIND_HOOKS="$ZDOTDIR/.sh/functions/find_hooks"
export ZDOTDIR ZDOT_RUN_HOOKS ZDOT_FIND_HOOKS

# Define a search path to be used by run_hooks
if test "$ZDOTDIR" = "$HOME"; then
    ZDOTDIRPATH=$ZDOTDIR
    ZDOTDIRREVPATH=$ZDOTDIR
else
    # Include HOME in ZDOTDIR
    ZDOTDIRPATH="$ZDOTDIR $HOME"
    ZDOTDIRREVPATH="$HOME $ZDOTDIR"
fi
# }}}
# {{{ USER / USERNAME --------------------------------------------------------
# zsh sets USERNAME, GROUPS and E?[UG]ID
# bash only sets E?UID
USER=${USERNAME:-`id -un`}
: ${USERNAME:=$USER}
export USER USERNAME
# }}}
# {{{ PATH -------------------------------------------------------------------
# Save system-wid PATH for reference, but should we trust it ?
syspath=$HOME/.syspath.$HOST
if ! test -e $syspath; then
    echo "$PATH" 2>/dev/null > "$syspath"
fi
# Setting a fairly portable PATH
PATH=/usr/local/bin:/usr/X11R6/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/games:/usr/games
# Build PATH with common bin folders
. $ZDOTDIR/.sh/functions/enable_wordsplit
newpaths=
for dir in $ZDOTDIRREVPATH; do
    for newpath in                          \
                    $dir/sbin               \
                    $dir/bin                \
                    $dir/.local/$OSTYPE/bin \
                    $dir/.local/sbin        \
                    $dir/.local/bin         \
    ; do
        if test -d $newpath; then
            if test -z "$newpaths"; then
                newpaths=$newpath
            else
                newpaths=$newpaths:$newpath
            fi
        fi
    done
done
restore_wordsplit
PATH=$newpaths:$PATH
# The PATH might be completed by $ZDOTDIR/.shared_env.d hooks.
# }}}
# {{{ LANG -------------------------------------------------------------------
# I am french but I like using my software in English :
# We are going to set LANG=fr and LC_MESSAGES=en.
# This way the local setting are french (currency, etc…) but the messages are 
# in English.
if test "$(uname)" != "Darwin"; then
    export LANG=fr_FR.utf8
    export LC_MESSAGES=en_US.utf8
fi
# FIXME LANGUAGE seems to be the same as LC_MESSAGES. to confirm.
# FIXME What about darwin stuff ?
# }}}
# {{{ EDITOR and common main env. var. ---------------------------------------
# vim is my EDITOR of choice
command -v vim >/dev/null && {
    export EDITOR=vim
}
# Prefer iceweasel as browser
command -v iceweasel >/dev/null && {
    export BROWSER=iceweasel
}
# But if not present, prefer firefox (Ubuntu for ex.)
test -z "$BROWSER" && command -v firefox >/dev/null && {
    export BROWSER=firefox
}
# }}}
# Load shared_env hooks (if present)
. $ZDOT_RUN_HOOKS .shared_env.d

if test -n "$shell_interactive"; then
    . $ZDOTDIR/.shrc
fi

shared_env_loaded=y
# vim:filetype=sh foldmethod=marker autoindent expandtab shiftwidth=4
